element: type abstract {
	nullable: annotation<bool>
	optional: annotation<bool>
	description: annotation<string>
}

object: type extends(element) composite(element) {
	extends: annotation<string>
	open: annotation<bool> default(true)
	optional: modifier
}

array: type extends(element) minTypeParamCount(0) maxTypeParamCount(1)

string: type extends(element) {
	length: annotation<int>
	minLength: annotation<int>
	maxLength: annotation<int>
}

int: type extends(element) {
	min: annotation<int>
	max: annotation<int>
}

long: type extends(element) {
	min: annotation<int>
	max: annotation<int>
}

decimal: type extends(element) {
	min: annotation<number>
	max: annotation<number>
}

double: type extends(element) {
	min: annotation<number>
	max: annotation<number>
}

bool: type extends(element)
raw: type extends(element)

// Any type name that does not match one of the built-in ones will be interpreted as a subtype of "element".
// This allows to mix built-in types with user-defined types.
*: type extends(element)

